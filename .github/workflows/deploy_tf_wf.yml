on:
  push:
    branches:
    - architecture
permissions:
  id-token: write # Necesario para OIDC
  contents: read  # Permite leer el código del repositorio
env:
  TF_WORKING_DIR: .
jobs:
  terraform_plan:
    name: deploy to aws
    runs-on: ubuntu-22.04
    steps:
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.5
          
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_NAME }}" -backend-config="key=${{ vars.TF_STATE_FILE }}" -backend-config="region=${{ vars.AWS_REGION }}"
        working-directory: .
        
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: false
        
      - name: Terraform validate
        id: validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}
        continue-on-error: false
        
      - name: Upload Terraform Plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-artifact
          path: ${{ env.TF_WORKING_DIR }}/tfplan # Asegúrate de que la ruta sea correcta
          retention-days: 15 # Opcional: Limpiar artifacts después de 1 día
        
